<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:redis="http://www.springframework.org/schema/redis"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
        http://www.springframework.org/schema/beans/spring-beans.xsd 
        http://www.springframework.org/schema/context 
        http://www.springframework.org/schema/context/spring-context.xsd
                 http://www.springframework.org/schema/util 
         http://www.springframework.org/schema/util/spring-util-2.0.xsd
         http://www.springframework.org/schema/redis http://www.springframework.org/schema/redis/spring-redis-1.0.xsd">
        
	<!-- 缓存的层级-->
 	<context:component-scan base-package="com.hori.grms.cache" />
	<!-- 引入redis配置 -->
 	<!-- <context:property-placeholder location="classpath:classpath:/com/jlit/bigData/resource/redis.properties" ignore-unresolvable="true"/> -->
	<!-- Redis 配置 -->
	<bean id="jedisPoolConfig" class="redis.clients.jedis.JedisPoolConfig">
		<property name="maxTotal" value="${redis.pool.maxTotal}" />
		<property name="maxIdle" value="${redis.pool.maxIdle}" />
		<property name="maxWaitMillis" value="${redis.pool.maxWaitMillis}" />
		<property name="testOnBorrow" value="${redis.pool.testOnBorrow}" />
	</bean>

	<!-- redis单节点数据库连接配置 -->
	<bean id="redisConnectionFactory" class="org.springframework.data.redis.connection.jedis.JedisConnectionFactory">
		<property name="hostName" value="${redis.ip}" />
		<property name="port" value="${redis.port}" />
		<property name="password" value="${redis.pass}" />
		<property name="poolConfig" ref="jedisPoolConfig" />
	</bean> 

	<!-- redisTemplate配置，redisTemplate是对Jedis的对redis操作的扩展，有更多的操作，封装使操作更便捷 -->
	<bean id="redisTemplate" class="org.springframework.data.redis.core.StringRedisTemplate">
		<property name="connectionFactory" ref="redisConnectionFactory" />
		<!--如果不配置Serializer，那么存储的时候智能使用String，如果用User类型存储，那么会提示错误User can't cast 
		to String！！！ 解决不了 -->
		 <property name="keySerializer">
            <bean class="org.springframework.data.redis.serializer.StringRedisSerializer"/>
        </property>
        <property name="valueSerializer">
            <bean class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer"/>
        </property>
	</bean>
	
	<!-- 序列化：一般我们向Redis发送一个消息定义的Java对象，这个对象需要序列化。这里使用JdkSerializationRedisSerializer -->
	<bean id="jdkSerializer"
		class="org.springframework.data.redis.serializer.JdkSerializationRedisSerializer" />

<!-- 		
     <bean id="messageDelegateListener" class="com.hori.grms.listener.MessageDelegateListener"/>
	监听者 smsMessageListener：消息监听器
	 <bean id="smsMessageListener"
		class="org.springframework.data.redis.listener.adapter.MessageListenerAdapter">
		<property name="delegate" ref="messageDelegateListener" />
		<property name="serializer" ref="jdkSerializer" />
	</bean>
	
	redis:listener-Container：定义消息监听，method：监听消息执行的方法，serializer：序列化，topic：监听主题（可以理解为队列名称）
	 <redis:listener-container>
		<redis:listener ref="smsMessageListener" method="handleMessage"
			serializer="jdkSerializer" topic="sms_queue_web_online" />
	</redis:listener-container>  -->
		<!-- 将session放入redis -->
	<bean id="redisHttpSessionConfiguration"
		class="org.springframework.session.data.redis.config.annotation.web.http.RedisHttpSessionConfiguration">
		<property name="maxInactiveIntervalInSeconds" value="1800" />
	</bean>
	<util:constant
		static-field="org.springframework.session.data.redis.config.ConfigureRedisAction.NO_OP" />
</beans>
