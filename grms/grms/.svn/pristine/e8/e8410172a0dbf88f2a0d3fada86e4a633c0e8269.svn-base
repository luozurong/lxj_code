package com.hori.grms.controller;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.URLEncoder;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.hori.grms.enums.ResultCode;
import com.hori.grms.model.SchemeInfo;
import com.hori.grms.service.SchemeInfoService;
import com.hori.grms.util.UUIDGenerator;

/**
 * 提案管理
 * @author wangzhen
 *
 */
@RequestMapping("/schemeInfo")
@Controller
public class SchemeInfoController extends BaseController {
	
	@Value("${file_upLoad_url}")
	private String fileUpLoadUrl;
	
	@Autowired
	private SchemeInfoService schemeInfoService;
	
	@Autowired
	private HttpServletRequest request;
	
	@Autowired
	private HttpServletResponse response;
	
	/**
	 * 提案列表页面
	 * @return
	 */
	@RequestMapping(value = "/list", method = {RequestMethod.GET})
	public String schemeInfoList() {
		return "/schemeInfo/schemeInfoList.jsp";
	}
	
	/**
	 * 获取提案列表数据
	 * @param keyword
	 * @param pageNumber
	 * @param pageSize
	 * @return
	 */
	@RequestMapping(value = "", method = {RequestMethod.GET})
	@ResponseBody
	public Object getSchemeInfos(String keyword, Integer pageNumber, Integer pageSize) {
		Map<String, Object> result = new HashMap<>();
		try {
			int total = schemeInfoService.getSchemeInfoCount(keyword);
			List<SchemeInfo> infos = schemeInfoService.getSchemeInfos(keyword, pageNumber, pageSize);
			result.put("code", ResultCode.SUCCESS.getCode());
			result.put("total", total);
			result.put("data", infos);
		} catch (Exception e) {
			result.put("code", ResultCode.ERROR.getCode());
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 上传提案页面
	 * @return
	 */
	@RequestMapping(value = "/add", method = {RequestMethod.GET})
	public String addSchemeInfo() {
		return "/schemeInfo/addSchemeInfo.jsp";
	}
	
	/**
	 * 上传附件（本地测试），后续改到fms服务器
	 * @param file
	 * @return
	 */
	@RequestMapping(value = "/upload", method = {RequestMethod.POST})
	@ResponseBody
	public Object uploadAttachment(@RequestParam("file") MultipartFile file) {
		Map<String, Object> result = new HashMap<>();
		try {
			if(file != null) {
				String fileName = file.getOriginalFilename();
				String fullPath = fileUpLoadUrl + "/schemeInfo";
				File tempFile = new File(fullPath);
				if(!tempFile.exists()) {
					tempFile.mkdirs();
				}
				String storePath = fullPath + File.separator + fileName;
				file.transferTo(new File(storePath)); 
				result.put("code", ResultCode.SUCCESS.getCode());
				result.put("path", storePath);
			}
		} catch (Exception e) {
			result.put("code", ResultCode.ERROR.getCode());
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 下载附件（本地测试），后续改到fms服务器
	 * @param id
	 * @throws Exception
	 */
	@RequestMapping(value = "/download", method = {RequestMethod.GET, RequestMethod.POST})
	public void downloadAttachment(String id) throws Exception {
		try {
			if(StringUtils.isNotBlank(id)) {
				SchemeInfo si = schemeInfoService.getSchemeInfoById(id);
				if(si != null) {
					File file = new File(si.getUrl());
					if(!file.exists()) {
						response.getWriter().println("file not found");
						return;
					}
					String fileName = file.getName();
					response.setContentType("APPLICATION/OCTET-STREAM");
					response.setCharacterEncoding("utf-8");
					response.setHeader("Content-Disposition", "attachment;filename=" + URLEncoder.encode(fileName, "UTF-8"));
					InputStream is = new BufferedInputStream(new FileInputStream(file));
					byte[] buffer = new byte[is.available()];
					is.read(buffer);
					is.close();
					OutputStream os = new BufferedOutputStream(response.getOutputStream());
					os.write(buffer);
					os.flush();
					os.close();
				}
			}
		} catch (Exception e) {
			response.getWriter().println("server error");
			e.printStackTrace();
		}
	}
	
	/**
	 * 保存
	 * @param schemeInfo
	 * @return
	 */
	@RequestMapping(value = "/save", method = {RequestMethod.POST})
	@ResponseBody
	public Object save(SchemeInfo schemeInfo) {
		Map<String, Object> result = new HashMap<>();
		try {
			if(!schemeInfoService.isExistName(schemeInfo.getName())) {
				String createrAccount = (String)request.getSession().getAttribute("userAccount");
				schemeInfo.setId(UUIDGenerator.generate());
				schemeInfo.setCreaterAccount(createrAccount);
				schemeInfoService.save(schemeInfo);
				result.put("code", ResultCode.SUCCESS.getCode());
			}else {
				result.put("code", 1);
			}
		} catch (Exception e) {
			result.put("code", ResultCode.ERROR.getCode());
			e.printStackTrace();
		}
		return result;
	}
	
	/**
	 * 删除/批量删除
	 * @param ids
	 * @return
	 */
	@RequestMapping(value = "/delete", method = {RequestMethod.POST})
	@ResponseBody
	public Object delete(String ids) {
		Map<String, Object> result = new HashMap<>();
		try {
			schemeInfoService.delete(Arrays.asList(ids.split(",")));
			result.put("code", ResultCode.SUCCESS.getCode());
		} catch (Exception e) {
			result.put("code", ResultCode.ERROR.getCode());
			e.printStackTrace();
		}
		return result;
	}
}
