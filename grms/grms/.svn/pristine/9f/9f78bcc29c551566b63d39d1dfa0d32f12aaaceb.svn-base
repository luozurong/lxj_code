package com.hori.grms.service.impl;

import java.util.Date;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hori.grms.dao.PendingEventMapper;
import com.hori.grms.model.PendingEvent;
import com.hori.grms.queryBean.PendingEventQueryBean;
import com.hori.grms.service.PendingEventService;
import com.hori.grms.util.UUIDGenerator;

/**
 * 待办事项service实现类
 * @author FWQ
 *
 */
@Service("pendingEventService")
public class PendingEventServiceImpl implements PendingEventService{
	@Autowired
	private PendingEventMapper pendingEventMapper;
	
	/**
	 * 待办事件列表查询
	 * @param pendingEventQueryBean
	 * @return
	 */
	@Override
	public List<PendingEvent> list(PendingEventQueryBean pendingEventQueryBean){
		return pendingEventMapper.list(pendingEventQueryBean);
	}
	
	/**
	 * 新添项目模块的待办事件
	 * @param projectName	项目名称
	 * @param projectCode	项目编号
	 * @param userAccount	业务员账号
	 * @param userName		业务员名称
	 */
	@Override
	public int createProjectPendingEvent(String projectName,String projectCode,
			String userAccount,String userName){
		PendingEvent pe = new PendingEvent();
		pe.setId(UUIDGenerator.generate());
		pe.setProjectName(projectName);
		pe.setProjectCode(projectCode);
		pe.setModelCode(projectCode);
		pe.setModelName("项目管理");
		pe.setStatus(0);
		pe.setRoleType(1);
		
		pe.setCreateTime(new Date());
		pe.setCreatorName(userName);
		pe.setCreatorAccount(userAccount);
		pe.setIsShow(1);
		
		return this.pendingEventMapper.insert(pe);
	}
	
	/**
	 * 修改“项目管理”待办事件状态
	 * @param projectCode 项目编号
	 * @param status      项目管理 0待审核 1审核通过 2审核不通过 3立项终止 4撤回
	 * @return
	 */
	@Override
	public void updateProjectPendingEvent(String projectCode,int status){
		
		PendingEvent pendingEvent = this.pendingEventMapper.selectByModelCodeAndName(projectCode, projectCode, "项目管理");
		if(pendingEvent != null){
			if(status == 1 || status == 3 || status == 4){
				pendingEvent.setIsShow(0);
			}else if(status == 2){
				pendingEvent.setRoleType(0);
			}else if(status == 0){
				pendingEvent.setRoleType(1);
			}
			
			pendingEvent.setStatus(status);
			pendingEvent.setUpdateTime(new Date());
			
			this.pendingEventMapper.updateByModelCode(pendingEvent);
		}
		
	}
	
	/**
	 * 新添合同模块的待办事件
	 * @param projectName	项目名称
	 * @param projectCode	项目编号
	 * @param contractCode  合同编号
	 * @param userAccount	业务员账号
	 * @param userName		业务员名称
	 */
	@Override
	public int createContractPendingEvent(String projectName,String projectCode,String contractCode,
			String userAccount,String userName){
		PendingEvent pe = new PendingEvent();
		pe.setId(UUIDGenerator.generate());
		pe.setProjectName(projectName);
		pe.setProjectCode(projectCode);
		pe.setModelCode(contractCode);
		pe.setModelName("合同管理");
		pe.setStatus(1);
		pe.setRoleType(0);
		
		pe.setCreateTime(new Date());
		pe.setCreatorName(userName);
		pe.setCreatorAccount(userAccount);
		pe.setIsShow(1);
		
		return this.pendingEventMapper.insert(pe);
	}
	
	/**
	 * 修改“合同管理”待办事件状态
	 * @param projectName 项目名称
	 * @param projectCode 合同编号
	 * @param status      合同管理（1：未提交 2：待审批-业务管理 3:待审批-合同管理 4:待审批-财务管理 
	 * 						5:审批通过 6:审批不通过 7:已完成 8：撤回-业务员 9：撤回-业务管理 10:撤回-合同管理 
	 * 						11:撤回-财务管理 12:删除-业务员）
	 * @return
	 */
	@Override
	public void updateContractPendingEvent(String projectCode,String contractCode,int status){
		
		PendingEvent pendingEvent = this.pendingEventMapper.selectByModelCodeAndName(projectCode,contractCode,"合同管理");
		if(pendingEvent != null){
			if(status == 12 || status == 7){
				//删除已完成，所有人都不可以看到待办事件
				pendingEvent.setIsShow(0);
				pendingEvent.setStatus(status);
			}else if(status == 2 || status == 9){
				//这两状态只有业务管理员角色可看，并且对外显示“待审批-业务管理”状态
				pendingEvent.setRoleType(1);
				pendingEvent.setStatus(2);
			}else if(status == 3 || status == 10){
				pendingEvent.setRoleType(2);
				pendingEvent.setStatus(3);
			}else if(status == 4 || status == 11){
				pendingEvent.setRoleType(3);
				pendingEvent.setStatus(4);
			}else if(status == 1 || status == 5 || status == 6 || status==8){
				/**
				 * 该4个状态业务员可看
				 * 审核不通过后修改合同，状态为“未提交” ；业务管理员未处理，业务员返回，状态为“未提交”
				 */
				pendingEvent.setRoleType(0);
				if(status==8){
					pendingEvent.setStatus(1);
				}else{
					pendingEvent.setStatus(status);
				}
			}
			
			pendingEvent.setUpdateTime(new Date());
			
			this.pendingEventMapper.updateByModelCode(pendingEvent);
		}
		
	}
	
	/**
	 * 新添收款模块的待办事件
	 * @param projectName	项目名称
	 * @param projectCode	项目编号
	 * @param backMoneyCode  收款编号
	 * @param userAccount	业务员账号
	 * @param userName		业务员名称
	 */
	@Override
	public int createBackMoneyPendingEvent(String projectName,String projectCode,String backMoneyCode,
			String userAccount,String userName){
		PendingEvent pe = new PendingEvent();
		pe.setId(UUIDGenerator.generate());
		pe.setProjectName(projectName);
		pe.setProjectCode(projectCode);
		pe.setModelCode(backMoneyCode);
		pe.setModelName("收款管理");
		pe.setStatus(0);
		pe.setRoleType(3);
		
		pe.setCreateTime(new Date());
		pe.setCreatorName(userName);
		pe.setCreatorAccount(userAccount);
		pe.setIsShow(1);
		
		return this.pendingEventMapper.insert(pe);
	}
	
	/**
	 * 修改“收款管理”待办事件状态
	 * @param projectName 项目名称
	 * @param backMoneyCode 收款编号
	 * @param status      收款管理（0待审核 1已审核 2审核不通过  3登记中-待审核 4登记中-异常 5登记中-已付款）
	 * @return
	 */
	public void updateBackMoneyPendingEvent(String projectCode,String backMoneyCode,int status){
		
		PendingEvent pendingEvent = this.pendingEventMapper.selectByModelCodeAndName(projectCode,backMoneyCode,"收款管理");
		if(pendingEvent != null){
			if(status == 1){
				pendingEvent.setIsShow(0);
				pendingEvent.setStatus(status);
			}else if(status == 2){
				pendingEvent.setRoleType(0);
				pendingEvent.setStatus(status);
			}else if(status == 0){
				//审核不通过后，业务员修改提交 状态为0待审核 
				pendingEvent.setRoleType(3);
				pendingEvent.setStatus(status);
			}
			
			pendingEvent.setUpdateTime(new Date());
			
			this.pendingEventMapper.updateByModelCode(pendingEvent);
		}
		
	}
	
	
	/**
	 * 新添项目执行模块的待办事件
	 * @param projectName	项目名称
	 * @param projectCode	项目编号
	 * @param projectActionCode  执行编号
	 * @param roleType	      执行角色 1为业务管理员，4为社区运营执行管理员，5为电商运营管理员，6为用户运营执行管理员，7为媒管执行管理员
	 */
	@Override
	public int createProjectActionPendingEvent(String projectName,String projectCode,
			String projectActionCode,int roleType){
		PendingEvent pe = new PendingEvent();
		pe.setId(UUIDGenerator.generate());
		pe.setProjectName(projectName);
		pe.setProjectCode(projectCode);
		pe.setModelName("执行管理");
		pe.setModelCode(projectActionCode);
		//否则为：执行状态-待确认
		pe.setStatus(7);
		
		pe.setRoleType(roleType);
		pe.setCreateTime(new Date());
		pe.setIsShow(1);
		
		return this.pendingEventMapper.insert(pe);
	}
	
	/**
	 * 新添项目执行异常模块的待办事件
	 * @param projectName	项目名称
	 * @param projectCode	项目编号
	 * @param projectActionCode  执行编号
	 * @param exceptionId  项目执行异常ID
	 */
	@Override
	public int createProjectActionExceptionPendingEvent(String projectName,String projectCode,
			String projectActionCode,String exceptionId){
		PendingEvent pe = new PendingEvent();
		pe.setId(UUIDGenerator.generate());
		pe.setProjectName(projectName);
		pe.setProjectCode(projectCode);
		pe.setModelName("执行管理");
		pe.setModelCode(projectActionCode);
		pe.setStatus(13);
		
		pe.setRoleType(1);
		pe.setCreateTime(new Date());
		pe.setIsShow(1);
		pe.setExceptionId(exceptionId);
		
		return this.pendingEventMapper.insert(pe);
	}
	
	
	/**
	 * 修改“执行管理”待办事件状态
	 * @param projectCode 项目编号
	 * @param projectActionCode	 执行编号
	 * @param exceptionId  项目执行异常ID (项目执行异常 才传，否则为空)
	 * @param status      执行管理 1:置换场地 2:扣款 3:继续 4:暂停 5:恢复 6终止 7执行状态-待确认 8执行状态-策划中 
	 * 						9执行状态-未执行 10执行状态-执行中 11执行状态-已完成 12项目异常-正常 13项目异常-异常
	 *  					以下状态为执行部门的确认 14:置换场地确认 15:扣款确认 16:继续确认 17:暂停确认 18:恢复确认 19终止确认
	 */
	@Override
	public void updateProjectActionPendingEvent(String projectCode,String projectActionCode,
			String exceptionId,int status){
		
		PendingEvent pendingEvent = null;
		if(exceptionId != null && !"".equals(exceptionId)){
			//执行异常上报的流程
			pendingEvent = this.pendingEventMapper.selectByExceptionId(exceptionId);
			if(pendingEvent != null){
				if(status == 1 || status == 3 || 
						status == 4 || status == 5 || status == 6){
					//这些状态为业务管理员处理后的状态，提醒对应的执行部门
					pendingEvent.setStatus(status);
					//异常对应的执行待办
					PendingEvent pe = this.pendingEventMapper.
							selectByModelCodeAndName(projectCode,projectActionCode,"执行管理");
					
					pendingEvent.setRoleType(pe!=null?pe.getRoleType():-100);
				}else if(status == 2){
					//这些状态为业务管理员处理后的扣款状态，提醒对应的财务部门
					pendingEvent.setStatus(status);
					pendingEvent.setRoleType(3);
				}else if(status == 14 || status == 16 || 
						status == 17 || status == 18){
					//这些状态为执行部门确认的状态 关闭对应的执行异常待办
					pendingEvent.setIsShow(0);
					pendingEvent.setStatus(status);
				}else if(status == 19){
					//这些状态为执行部门确认的终止确认 关闭对应的执行异常待办及执行待办
					pendingEvent.setIsShow(0);
					pendingEvent.setStatus(status);
					
					//异常对应的执行待办
					PendingEvent pe = this.pendingEventMapper.
							selectByModelCodeAndName(projectCode,projectActionCode,"执行管理");
					pe.setIsShow(0);
					pe.setStatus(status);
					pe.setUpdateTime(new Date());
					this.pendingEventMapper.updateByModelCode(pe);
				}
			}
		}else{
			//正常的执行流程
			pendingEvent = this.pendingEventMapper.
					selectByModelCodeAndName(projectCode,projectActionCode,"执行管理");
			
			if(pendingEvent != null){
				if(status == 11){
					pendingEvent.setIsShow(0);
					pendingEvent.setStatus(status);
				}else if(status == 7 || status == 8 || status == 9  || status == 10){
					pendingEvent.setStatus(status);
				}
				
			}
		}
		
		pendingEvent.setUpdateTime(new Date());
		
		this.pendingEventMapper.updateByModelCode(pendingEvent);
		
	}
}
