/**
 * 
 */
package com.hori.grms.controller;

import java.io.File;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.apache.cxf.attachment.AttachmentSerializer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;

import com.alibaba.fastjson.JSON;
import com.fasterxml.jackson.databind.jsonFormatVisitors.JsonAnyFormatVisitor;
import com.hori.grms.enums.ResultCode;
import com.hori.grms.model.Attachment;
import com.hori.grms.pageModel.Json;
import com.hori.grms.util.Result;

/**
 * @ClassName: AttachmentController
 * @Description: 附件表
 * @author zhuqiang
 * @date 2018年8月13日 上午10:00:57
 */
@Controller
@RequestMapping("/attachment")
public class AttachmentController{
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	// 读取培正文件路径
	private String storePath;

	@RequestMapping(value = "/uploadProjectFile", method = RequestMethod.POST,produces="text/html;charset=UTF-8;")
	@ResponseBody
	public String uploadProjectFile(HttpServletRequest request, @RequestParam MultipartFile file) {
		Json json = new Json();
		try {
			//文件名
			String fileName = file.getOriginalFilename();
			
			
			/*if (!filepath.getParentFile().exists()) {
				filepath.getParentFile().mkdirs();// 如果目录不存在，创建目录
			}*/
            //TODO 文件保存...返回文件保存地址...待续
			//file.transferTo(new File(storePath + File.separator + fileName));// 把文件写入目标文件地址
			
			//路径
			String fileUrl="http://baidu.com";
			
			Attachment attachment=new Attachment();
			attachment.setId(UUID.randomUUID().toString().replace("-", ""));
			attachment.setFileName(fileName);
			attachment.setFileUrl(fileUrl);
			attachment.setType(1);
			
			HttpSession session=request.getSession();
			List<Attachment> attchments=(List<Attachment>) session.getAttribute("attchmentsFrom");					
			
			if(null==attchments||attchments.size()==0)  attchments=new ArrayList<>();
			
			attchments.add(attachment);
			
			session.setAttribute("attchmentsFrom", attchments);
			
			json.setObj(attachment);			
			json.setSuccess(true);
			json.setMsg("文件上传成功");
			logger.info("上传成功！！！");
		} catch (Exception e) {
			e.printStackTrace();

			json.setMsg("文件上传错误");
		} finally {
			return JSON.toJSONString(json);
		}
	}

	public String getStorePath() {
		return storePath;
	}

	public void setStorePath(String storePath) {
		this.storePath = storePath;
	}
	
	/**
	 * 文件session逻辑删除
	 * @param request
	 * @param id
	 * @return
	 */
	@RequestMapping(value = "/deleteAttchment",produces="text/html;charset=UTF-8;")
	@ResponseBody
	public String deleteAttchment(HttpServletRequest request,@RequestParam("id") String id ){
		Json json = new Json();
		try{
			HttpSession session=request.getSession();
			List<Attachment> attchments=(List<Attachment>) session.getAttribute("attchmentsFrom");
			
			if(attchments==null) throw new RuntimeException("文件不存在");
			boolean flag=false;
			for(int i=0;i<attchments.size();i++){
				if(attchments.get(i).getId().equals(id.trim())){
					Attachment rmAttachment=attchments.remove(i);										
					json.setSuccess(true);
					json.setMsg("文件删除成功");	
					
					flag=true;
					
					//将要删除的文件信息保存
					List<Attachment> attchmentRMs=(List<Attachment>) session.getAttribute("attchmentsFromRM");					
					if(attchmentRMs==null)  attchmentRMs=new ArrayList<>();
					attchmentRMs.add(rmAttachment);
					session.setAttribute("attchmentsFromRM", attchmentRMs);	
					break;
				}
			}	
			if(!flag) new RuntimeException("未找到文件");
		}catch(Exception e){
			logger.info(e.getMessage());
			json.setMsg("文件删除错误");
		}finally{
			return JSON.toJSONString(json);
		}		
		
	}

}
