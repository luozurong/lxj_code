package com.hori.grms.service.impl;

import java.util.List;

import org.apache.commons.lang3.StringUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.hori.grms.dao.CloseCaseMapper;
import com.hori.grms.model.Attachment;
import com.hori.grms.model.CloseCaseInfo;
import com.hori.grms.queryBean.CloseCaseQueryBean;
import com.hori.grms.service.CloseCaseService;
import com.hori.grms.vo.CloseCaseVo;

@Service
public class CloseCaseServiceImpl implements CloseCaseService {

	@Autowired
	private CloseCaseMapper closeCaseMapper;
	
	@Override
	public List<CloseCaseVo> getCloseCases(CloseCaseQueryBean queryBean) {
		if(queryBean != null) {
			queryBean.setPageIndex((queryBean.getPageNumber() - 1) * queryBean.getPageSize());
			if(StringUtils.isNotBlank(queryBean.getKeyword())) {
				queryBean.setKeyword("%" + queryBean.getKeyword() + "%");
			}
			if(StringUtils.isNotBlank(queryBean.getCreateTimeEnd())) {
				queryBean.setCreateTimeEnd(queryBean.getCreateTimeEnd().trim() + " 23:59:59");
			}
			if(StringUtils.isNotBlank(queryBean.getActionTimeEnd())) {
				queryBean.setActionTimeEnd(queryBean.getActionTimeEnd().trim() + " 23:59:59");
			}
		}
		List<CloseCaseVo> ccis = closeCaseMapper.getCloseCases(queryBean);
		if(ccis != null && !ccis.isEmpty()) {
			for(CloseCaseVo cc : ccis) {
				//附件
				List<Attachment> attachments = closeCaseMapper.getAttachmentByCloseCaseId(cc.getId());
				cc.setAttachments(attachments);
				if(queryBean.getUserType() == 0) {
					//通过项目编号获取各个执行部门的执行结案
					List<CloseCaseInfo> cinfos = closeCaseMapper.getCloseCaseByProjectCode(cc.getProjectCode());
					for(CloseCaseInfo cinfo : cinfos) {
						//如果其中有一个是未提交状态，则结案状态（项目维度）为不能处理状态，这里用0标识
						if(cinfo.getStatus() != null && cinfo.getStatus() <= 4) {
							cc.setStatus(0);
							break;
						}
					}
				}
			}
		}
		return ccis;
	}

	@Override
	public int getCloseCaseCount(CloseCaseQueryBean queryBean) {
		if(queryBean != null) {
			if(StringUtils.isNotBlank(queryBean.getKeyword())) {
				queryBean.setKeyword("%" + queryBean.getKeyword() + "%");
			}
			if(StringUtils.isNotBlank(queryBean.getCreateTimeEnd())) {
				queryBean.setCreateTimeEnd(queryBean.getCreateTimeEnd().trim() + " 23:59:59");
			}
			if(StringUtils.isNotBlank(queryBean.getActionTimeEnd())) {
				queryBean.setActionTimeEnd(queryBean.getActionTimeEnd().trim() + " 23:59:59");
			}
		}
		return closeCaseMapper.getCloseCaseCount(queryBean);
	}
	
	@Override
	public Attachment getAttachmentById(String id) {
		return closeCaseMapper.getAttachmentById(id);
	}
	
	@Override
	public int updateStatusForAction(List<String> ids, Integer status) {
		int count = 0;
		if(ids != null && !ids.isEmpty()) {
			for(String id : ids) {
				count += closeCaseMapper.commit(id, status);
			}
		}
		return count;
	}
	
	@Override
	public int updateStatusForBusiness(List<String> closeCaseCodes, Integer status) {
		int count = 0;
		if(closeCaseCodes != null && !closeCaseCodes.isEmpty()) {
			for(String closeCaseCode : closeCaseCodes) {
				count += closeCaseMapper.commit(closeCaseCode, status);
			}
		}
		return count;
	}

	@Override
	public int uploadAttachment(List<Attachment> attachments) {
		int count = 0;
		if(attachments != null && !attachments.isEmpty()) {
			for(Attachment attachment : attachments) {
				count += closeCaseMapper.uploadAttachment(attachment);
			}
		}
		return count;
	}
	
	@Override
	public int deleteAttachments(List<String> ids) {
		int count = 0;
		if(ids != null && !ids.isEmpty()) {
			for(String id : ids) {
				if(StringUtils.isNotBlank(id)) {
					count += closeCaseMapper.deleteAttachment(id);
				}
			}
		}
		return count;
	}
	
	@Override
	public int save(CloseCaseInfo closeCaseInfo) {
		return closeCaseMapper.save(closeCaseInfo);
	}
}
