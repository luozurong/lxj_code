package com.hori.grms.service.impl;

import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.annotations.Param;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.hori.grms.dao.ContractApproveLogMapper;
import com.hori.grms.dao.ContractMapper;
import com.hori.grms.dao.ContractTemplateMapper;
import com.hori.grms.model.Contract;
import com.hori.grms.model.ContractApproveLog;

import com.hori.grms.model.ContractTemplate;
import com.hori.grms.queryBean.ContractProjectQueryBean;
import com.hori.grms.queryBean.ContractQueryBean;
import com.hori.grms.queryBean.ContractTemplateQueryBean;
import com.hori.grms.service.ContractService;
import com.hori.grms.util.DateUtils;
import com.hori.grms.util.UUIDGenerator;
import com.hori.grms.vo.ContractProjectVo;
import com.hori.grms.vo.ContractVo;
import com.hori.vo.UserDetailLoginVo;
@Service
public class ContractServiceImpl implements ContractService{

	@Autowired
    private ContractTemplateMapper contractTemplateMapper;
	@Autowired
    private ContractMapper contractMapper;
	@Autowired
    private ContractApproveLogMapper contractApproveLogMapper;
	@Override
	public PageInfo<ContractVo> getContractList(ContractQueryBean queryBean) {
		PageHelper.startPage(queryBean.getPageNumber(),queryBean.getPageSize());
		if(StringUtils.isNotBlank(queryBean.getStartTime())){
			queryBean.setStartTime(queryBean.getStartTime()+" 00:00:00"); 
		}
		if(StringUtils.isNotBlank(queryBean.getEndTime())){
			queryBean.setEndTime(queryBean.getEndTime()+" 23:59:59"); 
		}
		List<ContractVo> contractList=contractMapper.selectByContract(queryBean);
		//找出待审批人
        PageInfo<ContractVo> pageInfo = new PageInfo<>(contractList);

		return pageInfo;
	}
	@Override
	public PageInfo<ContractProjectVo> getProjectList(ContractProjectQueryBean queryBean) {
		PageHelper.startPage(queryBean.getPageNumber(),queryBean.getPageSize());
		List<ContractProjectVo> projectList=contractMapper.selectProject(queryBean);
        PageInfo<ContractProjectVo> pageInfo = new PageInfo<>(projectList);

		return pageInfo;
	}
	@Override
	public PageInfo<ContractTemplate> getContractTemplate(ContractTemplateQueryBean queryBean) {
		PageHelper.startPage(queryBean.getPageNumber(),queryBean.getPageSize());
		if(StringUtils.isNotBlank(queryBean.getStartTime())){
			queryBean.setStartTime(queryBean.getStartTime()+" 00:00:00"); 
		}
		if(StringUtils.isNotBlank(queryBean.getEndTime())){
			queryBean.setEndTime(queryBean.getEndTime()+" 23:59:59"); 
		}
		List<ContractTemplate> contractTemplateList=contractTemplateMapper.selectByQueryBean(queryBean);
        PageInfo<ContractTemplate> pageInfo = new PageInfo<>(contractTemplateList);

		return pageInfo;
	}
	@Override
	public void delContractTemplate(String id) {
		contractTemplateMapper.deleteByPrimaryKey(id);
		
	}
	@Override
	public void saveContractTemplate(ContractTemplate contractTemplate) {
		// TODO Auto-generated method stub
		contractTemplateMapper.insert(contractTemplate);
	}
	@Override
	public void saveContract(Contract contract){
		if(StringUtils.isNotBlank(contract.getId())){
			ContractVo contractOld=contractMapper.selectByPrimaryKey(contract.getId());
			contract.setUpdateTime(new Date());
			contract.setCreaterAccount(contractOld.getCreaterAccount());
			contract.setCreaterName(contractOld.getCreaterName());
			contract.setCreaterTime(contractOld.getCreaterTime());
			contract.setStatus(1);
			contract.setId(contract.getId());
			contractMapper.updateByPrimaryKeySelective(contract);
		}else{
			contract.setCreaterTime(new Date());
			contract.setUpdateTime(new Date());
			contract.setStatus(1);
			contract.setId(UUIDGenerator.generate());
			contract.setContractCode(UUIDGenerator.generate());
			contractMapper.insert(contract);
			//向对应项目回写合同编码
			
		}
	}
	@Override
	public ContractVo getContractOne(String id){
		ContractVo contract=contractMapper.selectByPrimaryKey(id);
		return contract;
	}
	@Override
	public void delContract(String id){
		contractMapper.deleteByPrimaryKey(id);
	}
	@Override
	public Map<String, Object> updateCommitContract(String id) {
		//提交
		 Map<String, Object> map=new HashMap<String,Object>();
		ContractVo contract=contractMapper.selectByPrimaryKey(id);
		if(contract.getStatus()==1){
			int i=contractMapper.updateCommitContract(id, "2");
		}
		if(contract.getStatus()==5){
			int i=contractMapper.updateCommitContract(id, "7");
		}
		map.put("status", true);
		return map;
	}
	//审核成功和审核不成功和撤回
	@Override
	public Map<String, Object> updateApproveContract(String id,String desc, String status,HttpServletRequest request) {
		 Map<String, Object> map=new HashMap<String,Object>();
	      
		ContractVo contract=contractMapper.selectByPrimaryKey(id);
		int oldStatus=contract.getStatus();
		if(status.equals("y")){
			if(contract.getStatus()==2||contract.getStatus()==3||contract.getStatus()==4){
				int statusTemp=contract.getStatus()+1;
				int i=contractMapper.updateCommitContract(id, String.valueOf(statusTemp));
				contract.setStatus(statusTemp);


			}
		}else if(status.equals("n")){
			int i=contractMapper.updateCommitContract(id, "6");
			contract.setStatus(6);

		}else if(status.equals("c")){
			if(contract.getStatus()==2||contract.getStatus()==3||contract.getStatus()==4){
				int statusTemp=contract.getStatus()-1;
				int i=contractMapper.updateCommitContract(id, String.valueOf(statusTemp));

			}
		}
		if(status.equals("y")||status.equals("n")){
			String userAccount=(String) request.getSession().getAttribute("userAccount");
			String roleName=(String) request.getSession().getAttribute("roleName");

			UserDetailLoginVo userDetailLoginVo=(UserDetailLoginVo) request.getSession().getAttribute("userDetailVo");
			ContractApproveLog contractApproveLog=new ContractApproveLog();
			contractApproveLog.setApproveAccount(userAccount);
			contractApproveLog.setApproveDesc(desc);
			contractApproveLog.setApproveName(userDetailLoginVo.getName());
			contractApproveLog.setApproveRoleName(roleName);
			contractApproveLog.setApproveStatus(oldStatus);
			contractApproveLog.setApproveTime(new Date());
			contractApproveLog.setContractCode(contract.getContractCode());
			contractApproveLog.setId(UUIDGenerator.generate());
			contractApproveLogMapper.insertSelective(contractApproveLog);
		}
		map.put("status", true);
		return map;
	}
	@Override
	public List<ContractApproveLog> selectApproveContractLog(String contractCode) {
		List<ContractApproveLog> approveLogList=contractApproveLogMapper.selectByContractCode(contractCode);
		return approveLogList;
	}
	@Override
	public List<ContractVo> selectContractOhter(String id) {
		List<ContractVo>  contractList=contractMapper.selectByContractOther(id);
		return contractList;
	}
	@Override
	public Contract getExecuteContract(String projectCode) {
		return contractMapper.selectExecuteContractByProjectCode(projectCode);
	}
	@Override
	public void updateContractUrl(String id, String url) {
		contractMapper.updateContractUrl(id,url);
		
	}
}
