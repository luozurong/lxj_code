/**
 * 
 */
package com.hori.grms.service.impl;

import java.util.List;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.hori.grms.dao.ProjectActionMapper;
import com.hori.grms.dao.ProjectProductMapper;
import com.hori.grms.dao.ProjectProductMenuMapper;
import com.hori.grms.model.ProjectAction;
import com.hori.grms.queryBean.ProjectActionQueryBean;
import com.hori.grms.service.ProjectActionService;
import com.hori.grms.vo.CommunityProjectActionVo;

/** 
 * @ClassName: ProjectActionServiceImpl 
 * @Description:项目执行清单
 * @author zhuqiang
 * @date 2018年8月8日 下午6:55:24 
 */
@Service("projectActionService")
public class ProjectActionServiceImpl implements ProjectActionService{
	@Autowired
	private ProjectActionMapper projectActionMapper;
	@Autowired
	private ProjectProductMenuMapper projectProductMenuMapper;

	@Override
	public PageInfo<CommunityProjectActionVo> listCommunityAction(ProjectActionQueryBean queryBean) {
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		List<CommunityProjectActionVo> list = projectActionMapper.listCommunityAction(queryBean);
		
		PageInfo<CommunityProjectActionVo> pageInfo = new PageInfo<CommunityProjectActionVo>(list);
		
		return pageInfo;
	}

	@Override
	public int update(ProjectAction projectAction) {
		return projectActionMapper.updateByPrimaryKeySelective(projectAction);
	}
	
	@Override
	public PageInfo<Map<String, Object>> listProjectAction(ProjectActionQueryBean queryBean) {
		
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		
		List<Map<String, Object>> list = projectActionMapper.listProjectAction(queryBean);
		
		PageInfo<Map<String, Object>> pageInfo = new PageInfo<Map<String, Object>>(list);
		
		return pageInfo;
	}

	@Override
	public ProjectAction getById(String projectActionId) {
		return projectActionMapper.selectByPrimaryKey(projectActionId);
	}

	@Override
	public int changeEStatusByActionCode(String actionCode, Integer exceptionStatus) {
		if (actionCode == null || exceptionStatus == null) {
			return 0;
		}
		return projectActionMapper.changeEStatusByActionCode(actionCode, exceptionStatus);
	}

	@Override
	public List<CommunityProjectActionVo> findCommunityProjectActionVoByProjectCode(String projectCode) {
		return projectActionMapper.findCommunityProjectActionVoByProjectCode(projectCode);
	}

	
	@Override
	public PageInfo<Map<String, Object>> listYMDAction(ProjectActionQueryBean queryBean) {
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		List<Map<String, Object>> list = projectActionMapper.listYMDAction(queryBean);
		if (list == null || list.size() < 0) {
			return null;
		}
		
		for (Map<String, Object> map : list) {
			String projectProductId = (String) map.get("projectProductId");
			long areaNum = projectProductMenuMapper.getAreaNumByPPId(projectProductId);
			map.put("areaNum", areaNum);
		}
		
		PageInfo<Map<String, Object>> pageInfo = new PageInfo<Map<String, Object>>(list);
		
		return pageInfo;
	}

	@Override
	public ProjectAction getByCode(String code) {
		
		return projectActionMapper.getByCode(code);
	}
}
