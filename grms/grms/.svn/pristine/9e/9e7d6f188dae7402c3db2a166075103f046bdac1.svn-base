/**
 * 
 */
package com.hori.grms.service.impl;

import java.util.List;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Date;
import java.util.Map;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

import org.apache.commons.lang.StringUtils;
import org.apache.log4j.Logger;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.github.pagehelper.PageHelper;
import com.github.pagehelper.PageInfo;
import com.hori.grms.dao.ProjectActionMapper;
import com.hori.grms.dao.ProjectProductMapper;
import com.hori.grms.dao.ProjectProductMenuMapper;
import com.hori.grms.enums.BusinessType;
import com.hori.grms.model.DepartmentBusinessType;
import com.hori.grms.model.Project;
import com.hori.grms.model.ProjectAction;
import com.hori.grms.model.ProjectActionExample;
import com.hori.grms.model.ProjectProduct;
import com.hori.grms.queryBean.ProjectActionQueryBean;
import com.hori.grms.service.DepartmentBusinessService;
import com.hori.grms.service.ProjectActionService;
import com.hori.grms.service.ProjectProductService;
import com.hori.grms.service.ProjectService;
import com.hori.grms.util.UUIDGenerator;
import com.hori.grms.vo.CommunityProjectActionVo;
import com.hori.grms.vo.ProjectActionVo;
import com.hori.grms.vo.ZhProjectActionVo;
import com.hori.grms.queryBean.ZhUmbQueryBean;
import com.hori.grms.queryBean.ProjectActionQueryBean;
import com.hori.grms.page.PageResult;

/** 
 * @ClassName: ProjectActionServiceImpl 
 * @Description:项目执行清单
 * @author zhuqiang
 * @date 2018年8月8日 下午6:55:24 
 */
@Service("projectActionService")
public class ProjectActionServiceImpl implements ProjectActionService{
	private final static Logger logger=Logger.getLogger(ProjectActionServiceImpl.class);
	@Autowired
	private ProjectActionMapper projectActionMapper;
	@Autowired
	private ProjectProductMenuMapper projectProductMenuMapper;
	@Autowired
	private ProjectProductService projectProductService;
	@Autowired
	private ProjectService projectService;
	@Autowired
	private DepartmentBusinessService departmentBusinessService;

	@Override
	public PageInfo<CommunityProjectActionVo> listCommunityAction(ProjectActionQueryBean queryBean) {
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		List<CommunityProjectActionVo> list = projectActionMapper.listCommunityAction(queryBean);
		
		PageInfo<CommunityProjectActionVo> pageInfo = new PageInfo<CommunityProjectActionVo>(list);
		
		return pageInfo;
	}

	@Override
	public int update(ProjectAction projectAction) {
		return projectActionMapper.updateByPrimaryKeySelective(projectAction);
	}
	
	@Override
	public PageInfo<Map<String, Object>> listProjectAction(ProjectActionQueryBean queryBean) {
		
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		
		List<Map<String, Object>> list = projectActionMapper.listProjectAction(queryBean);
		
		PageInfo<Map<String, Object>> pageInfo = new PageInfo<Map<String, Object>>(list);
		
		return pageInfo;
	}

	@Override
	public ProjectAction getById(String projectActionId) {
		return projectActionMapper.selectByPrimaryKey(projectActionId);
	}

	@Override
	public int changeEStatusByActionCode(String actionCode, Integer exceptionStatus) {
		if (actionCode == null || exceptionStatus == null) {
			return 0;
		}
		return projectActionMapper.changeEStatusByActionCode(actionCode, exceptionStatus);
	}

	@Override
	public List<CommunityProjectActionVo> findCommunityProjectActionVoByProjectCode(String projectCode) {
		return projectActionMapper.findCommunityProjectActionVoByProjectCode(projectCode);
	}

	
	@Override
	public PageInfo<Map<String, Object>> listYMDAction(ProjectActionQueryBean queryBean) {
		if (queryBean == null) {
			return null;
		}
		PageHelper.startPage(queryBean.getPageNumber(), queryBean.getPageSize());
		List<Map<String, Object>> list = projectActionMapper.listYMDAction(queryBean);
		if (list == null || list.size() < 0) {
			return null;
		}
		
		for (Map<String, Object> map : list) {
			String projectProductId = (String) map.get("projectProductId");
			long areaNum = projectProductMenuMapper.getAreaNumByPPId(projectProductId);
			map.put("areaNum", areaNum);
		}
		
		PageInfo<Map<String, Object>> pageInfo = new PageInfo<Map<String, Object>>(list);
		
		return pageInfo;
	}

	@Override
	public ProjectAction getByCode(String code) {
		
		return projectActionMapper.getByCode(code);
	}	
	@Override
	public PageResult queryPage(ProjectActionQueryBean qb) {
		Long count = projectActionMapper.queryPageCount(qb);
		if(count<=0){
			return new PageResult(0L, Collections.EMPTY_LIST);
		}
		List<CommunityProjectActionVo> result = projectActionMapper.selectZhongheDepartList(qb);
		PageResult pageResult = new PageResult(count,result);
		return pageResult;
	}

	@Override
	public PageResult queryUmbPage(ZhUmbQueryBean qb) {
		Long count = projectActionMapper.queryCount(qb);
		if(count<=0){
			return new PageResult(0L, Collections.EMPTY_LIST);
		}
		List<ZhProjectActionVo> result = projectActionMapper.selectZhUmbList(qb);
		for (int i = 0; i < result.size(); i++) {
			long areaNum = projectProductMenuMapper.getAreaNumByPPId(result.get(i).getProjectProductId());
			result.get(i).setAreaNum(areaNum);
		}
		PageResult pageResult = new PageResult(count,result);
		return pageResult;
	}
	@Override
	public String generateActionCode() {
		SimpleDateFormat sdf=new SimpleDateFormat("yyyyMMddhhmmssSSS");
		String code=sdf.format(new Date());
		ProjectAction pa=this.getByCode(code);
		if(null==pa){
			return code;
		}else{
			return generateActionCode();
		}
	}
	@Override
	public void createProjectActionsByProject(String projectCode) {
		//判断是否已经生产执行清单，生成过了就不生成
		ProjectActionExample example=new ProjectActionExample();
		example.or().andProjectCodeEqualTo(projectCode);
		List<ProjectAction> projectActions=this.projectActionMapper.selectByExample(example);
		if(null!=projectActions && projectActions.size()>0){
			logger.info("项目："+projectCode+"已经生成了执行清单，不能重复生成");
			return ;
		}
		Project project=this.projectService.getByCode(projectCode);
		//生成执行清单，根据项目清单表数据生成
		List<ProjectProduct> projectProducts=this.projectProductService.getListByProject(projectCode);
		if(null!=projectProducts && projectProducts.size()>0){
			for(ProjectProduct pp:projectProducts){
				ProjectAction projectAction=new ProjectAction();
				projectAction.setId(UUIDGenerator.generate());
				projectAction.setProjectCode(projectCode);
				projectAction.setProjectName(project.getName());
				projectAction.setProjectProductId(pp.getId());
				//不同的项目清单，生成的执行清单指定的执行部门逻辑不同
				//社区运营的清单，需要根据区域找到对应的执行部门
				//媒管、用户、商城的清单，则根据业务找到对应的执行部门即可
				List<DepartmentBusinessType> departmentBusinessTypeList=new ArrayList<DepartmentBusinessType>();
				if(BusinessType.COMMUNITY_OPT.getValue().equals(pp.getBusinessType())){//社区运营
					if(StringUtils.isNotBlank(pp.getCity())){//城市需要有
						departmentBusinessTypeList=this.departmentBusinessService.findByBusinessAreaCity(pp.getCity(), pp.getBusinessType());
					}
					
					
				}else if (BusinessType.MEDIA_OPT.getValue().equals(pp.getBusinessType())){
					departmentBusinessTypeList=departmentBusinessService.findByBusinessType(pp.getBusinessType());
				}else if (BusinessType.USER_OPT.getValue().equals(pp.getBusinessType())){
					departmentBusinessTypeList=departmentBusinessService.findByBusinessType(pp.getBusinessType());
				}else if (BusinessType.MALL_OPT.getValue().equals(pp.getBusinessType())){
					departmentBusinessTypeList=departmentBusinessService.findByBusinessType(pp.getBusinessType());
				}
				if(null!=departmentBusinessTypeList && departmentBusinessTypeList.size()>0){
					projectAction.setDepartmentId(departmentBusinessTypeList.get(0).getDepartmentId());
					projectAction.setDepartmentName(departmentBusinessTypeList.get(0).getDepartmentName());
				}
				projectAction.setBusinessActionStatus(1);//状态：执行中
				projectAction.setActionStatus(1);//1：待确认
				projectAction.setActionCode(this.generateActionCode());//生成执行清单编号
				projectAction.setExceptionStatus(0);//是否异常 0
				this.projectActionMapper.insert(projectAction);
				
			}
		}
		
	}

	public String getOrganizationSeqByActionCode(String actionCode) {
		
		return projectActionMapper.getOrganizationSeqByActionCode(actionCode);
	}


	@Override
	public List<ProjectActionVo> findProjectActionVoByProjectCode(String projectCode) {
		return projectActionMapper.findProjectActionVoByProjectCode( projectCode);
	}


	@Override
	public List<ProjectAction> listByProjectCode(String projectCode) {
		// TODO Auto-generated method stub
		return projectActionMapper.listByProjectCode(projectCode);
	}

}
