package com.hori.grms.controller;


import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringUtils;
import org.apache.poi.hssf.usermodel.HSSFCell;
import org.apache.poi.hssf.usermodel.HSSFCellStyle;
import org.apache.poi.hssf.usermodel.HSSFFont;
import org.apache.poi.hssf.usermodel.HSSFRichTextString;
import org.apache.poi.hssf.usermodel.HSSFRow;
import org.apache.poi.hssf.usermodel.HSSFSheet;
import org.apache.poi.hssf.usermodel.HSSFWorkbook;
import org.apache.poi.hssf.util.CellRangeAddress;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.IndexedColors;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.serializer.SerializerFeature;
import com.hori.grms.model.Attachment;
import com.hori.grms.model.Project;
import com.hori.grms.model.ProjectApproveLog;
import com.hori.grms.model.ProjectPeople;
import com.hori.grms.pageModel.Json;
import com.hori.grms.queryBean.ProjectQueryBean;
import com.hori.grms.service.AttachmentService;
import com.hori.grms.service.ProjectActionService;
import com.hori.grms.service.ProjectApproveLogService;
import com.hori.grms.service.ProjectPeopleService;
import com.hori.grms.service.ProjectProductService;
import com.hori.grms.service.ProjectService;
import com.hori.grms.util.ExportExcelUtil;
import com.hori.grms.vo.CommunityProjectActionVo;
import com.hori.grms.vo.ProjectDetailsVo;
import com.hori.grms.vo.project.ProductMenuVo;
import com.hori.grms.vo.project.ProjectMenuVo;
import com.hori.grms.vo.project.ProjectVo;


/**
 * 项目管理controller
 * 
 * @author Chenrw
 * @date 2018年8月9日
 */
@Controller
@RequestMapping("/project")
public class ProjectController extends BaseController {
	private final Logger logger = LoggerFactory.getLogger(this.getClass());

	@Autowired
	private ProjectService projectService;
	
	@Autowired
	private ProjectPeopleService projectPeopleService;
	@Autowired
	private ProjectProductService projectProductService;
	@Autowired
	private AttachmentService attachmentService;
	@Autowired
	private ProjectActionService  projectActionService;
	@Autowired
	private ProjectApproveLogService projectApproveLogService;
	/**
	 * 跳转项目列表页面
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping("/list")
	public String getProjectList(HttpServletRequest request, HttpServletResponse response) {

		return "/project/projectList.jsp";
	}
	/**
	 * 获取项目列表数据
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value ="/getlistData",produces="text/html;charset=UTF-8;")
	@ResponseBody
	public String getProjectListData(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		
		try {
			String parameter = request.getParameter("projectQueryBean");

			ProjectQueryBean projectQueryBean = JSON.parseObject(parameter, ProjectQueryBean.class);

			if (null == projectQueryBean) {
				projectQueryBean = new ProjectQueryBean();
			}
			List<Project> list = projectService.list(projectQueryBean);
			
			int total = projectService.total(projectQueryBean);
			
			resultMap.put("success", true);
			resultMap.put("rows", list);
			resultMap.put("total", total);
			
		} catch (Exception e) {
			
			logger.info("错误原因："+e.getMessage());
			resultMap.put("success", false);
		
		}
		
		
		return JSON.toJSONStringWithDateFormat(resultMap,"yyyy-MM-dd");
	}
	
	/**
	 * 
	 * @param type  0-新建,1-修改
	 * @param productCode
	 * @return
	 */
	@RequestMapping("/addProject")
	public String addProject(@RequestParam(value="type",required=false) Integer type,@RequestParam(value="productCode",required=false) String productCode){
		HttpSession session=getSession();
		HttpServletRequest request=getRequest();
		//新建		
		session.removeAttribute("projectVoStr");   //项目信息
		session.removeAttribute("project1Str");    //1
		session.removeAttribute("project2Str");    //2
		session.removeAttribute("project3Str");    //3
		session.removeAttribute("project4Str");    //4
		session.removeAttribute("attchmentsFromStr");  //  要添加的附件
		session.removeAttribute("projectMeauList");  //清单列表集合   
		session.removeAttribute("attchmentsFromRMStr");  // 要删除的附件
		 if(type==1){
		   //修改,查找并封装数据
		   ProjectVo projectVo=projectService.findProjectModel(productCode);
		   
		   request.setAttribute("projectVo", projectVo);
		   session.setAttribute("projectVoStr", JSON.toJSONString(projectVo));
		   
		   List<ProjectMenuVo> projectMs=projectProductService.findVoByProjectCode(productCode);
		   
		   List<ProjectMenuVo> project1=new ArrayList<>();
		   
		   for (ProjectMenuVo pv : projectMs) {
			   if(pv.getBusinessType().trim().equals("1")){
				   project1.add(pv);
			   }
			   
			   //项目2-执行清单
			   if(pv.getBusinessType().trim().equals("2")){		   				   
				   session.setAttribute("project2Str", JSON.toJSONString(pv));
			   }
				
			   //项目3-执行清单
			   if(pv.getBusinessType().trim().equals("3")){	
				   System.out.println("3："+JSON.toJSONString(pv));
				   session.setAttribute("project3Str", JSON.toJSONString(pv));
			   }
				
			   //项目4-执行清单
			   if(pv.getBusinessType().trim().equals("4")){		   				   
				   session.setAttribute("project4Str", JSON.toJSONString(pv));
			   }
		   }
		   //项目1-执行清单		   
		   session.setAttribute("project1Str", JSON.toJSONString(project1));
					   
		   //项目清单组合装json
		   session.setAttribute("projectMeauList", JSON.toJSONStringWithDateFormat(projectMs,"yyyy年MM月dd日   HH:mm:ss",SerializerFeature.DisableCircularReferenceDetect));		   		   
			
		   //附件清单  attchments
		   List<Attachment> attachments=attachmentService.findBycorrelationId(productCode);
		   
		   request.setAttribute("attchmentsFrom", attachments);
		   session.setAttribute("attchmentsFromStr", JSON.toJSONString(attachments));
		   
		}
		
		return "/project/addProject.jsp";
	}
	
	@RequestMapping("/addProjectAction")
	public String addProjectAction(){
		return "/project/addProjectProdect.jsp";
	}
	
	/**
	 * 撤回项目
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value ="/revoke")
	@ResponseBody
	public String revokeProject(HttpServletRequest request, HttpServletResponse response) {
		
		HttpSession session = request.getSession();
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			
			String productCode = request.getParameter("productCode");
			
			String userAccount = (String) session.getAttribute("userAccount");
			String userType = (String) session.getAttribute("userType");
			String userName = (String) session.getAttribute("userName");
			String roleType = (String) session.getAttribute("roleType");
			String dataArea = (String) session.getAttribute("dataArea");
			String userList = (String) session.getAttribute("userList");
			String resourceButton = (String) session.getAttribute("resourceButton");
			String resourceUrlSet = (String) session.getAttribute("resourceUrlSet");
			System.out.println("userAccount:"+userAccount+" ,userType:"+userType+" ,userName:"+userName
			+" ,roleType:"+roleType+" ,dataArea:"+dataArea+" ,userList:"+userList+" ,resourceButton:"+resourceButton+" ,resourceUrlSet:"+resourceUrlSet);
			projectService.revoke(productCode,userName,userAccount);

			resultMap.put("success", true);
			
		} catch (Exception e) {
			resultMap.put("success", false);
		}
		
		return JSON.toJSONString(resultMap);
	}
	@RequestMapping("/viewProject")
	public String viewProject(HttpServletRequest request, HttpServletResponse response){
		String projectCode = request.getParameter("projectCode");
		if(null!=projectCode&&!projectCode.equals("")) {   //判断ID是否为空
			ProjectDetailsVo projectVo =  projectService.findProjectDetailsVoByProjectCode(projectCode);
			List<ProjectPeople>  projectPeopleList = projectPeopleService.findByProjectCode(projectCode);
			projectVo.setRoles(projectPeopleList);
			List<ProjectMenuVo>  projectProductList = projectProductService.findVoByProjectCode(projectCode);
			List<Attachment> attachmentList = attachmentService.findBycorrelationId(projectCode);
			List<CommunityProjectActionVo> projectActionList  = projectActionService.findCommunityProjectActionVoByProjectCode(projectCode);
			List<ProjectApproveLog> projectApproveLogList = projectApproveLogService.findByProjectCode(projectCode);
			request.setAttribute("projectApproveLogList", projectApproveLogList);
			request.setAttribute("projectActionListStr", JSON.toJSONStringWithDateFormat(projectActionList,"yyyy-MM-dd"));
			request.setAttribute("attachmentList", attachmentList);
			request.setAttribute("projectProductListStr", JSON.toJSONStringWithDateFormat(projectProductList,"yyyy年MM月dd日   HH:mm:ss"));
			request.setAttribute("projectVo", projectVo);
		}
		return "/project/projectView.jsp";
	}
	
	/**
	 * 删除项目
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value ="/delet")
	@ResponseBody
	public String deletProject(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			HttpSession session = request.getSession();
			String userAccount = (String) session.getAttribute("userAccount");
			String userName = (String) session.getAttribute("userName");
			
			String productCode = request.getParameter("productCode");
			
			projectService.delet(productCode,userName,userAccount);

			resultMap.put("success", true);
			
		} catch (Exception e) {
			resultMap.put("success", false);
		}
		
		return JSON.toJSONString(resultMap);
	}
	/**
	 * 终止项目
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value ="/stopProject")
	@ResponseBody
	public String stopProject(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			
			HttpSession session = request.getSession();
			String userAccount = (String) session.getAttribute("userAccount");
			String userName = (String) session.getAttribute("userName");
			
			String productCode = request.getParameter("productCode");
			
			String remark = request.getParameter("remark");
			
			projectService.stopProject(productCode,userName,userAccount,remark);
			
			resultMap.put("success", true);
			
		} catch (Exception e) {
			resultMap.put("success", false);
			resultMap.put("msg", e.getMessage());
		}
		
		return JSON.toJSONString(resultMap);
	}
	/**
	 * 项目审核
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value ="/exam")
	@ResponseBody
	public String examProject(HttpServletRequest request, HttpServletResponse response) {
		
		Map<String, Object> resultMap = new HashMap<String, Object>();
		try {
			
			String productCode = request.getParameter("productCode");
			
			String remark = request.getParameter("remark");
			
			int examResult = Integer.valueOf(request.getParameter("examResult"));
			
			HttpSession session = request.getSession();
			String userAccount = (String) session.getAttribute("userAccount");
			String userName = (String) session.getAttribute("userName");
			
			projectService.examProject(productCode,userName,userAccount,remark,examResult);
			
			resultMap.put("success", true);
			
		} catch (Exception e) {
			resultMap.put("success", false);
		}
		
		return JSON.toJSONString(resultMap);
	}
	

	/**
	 * 项目立项
	 * @return
	 */
	@RequestMapping(value ="/createProject",produces="text/html;charset=utf-8")	
	@ResponseBody
	public String createProject(@RequestBody ProjectVo projectVo){
		Json json = new Json();
		try{
			HttpSession session=getSession();
            String project1Str=(String) session.getAttribute("project1Str");			
			
			List<ProjectMenuVo> project1=null;
			if(StringUtils.isNotBlank(project1Str)){
				project1=JSON.parseArray(project1Str, ProjectMenuVo.class);
			}
			String project2Str=(String) session.getAttribute("project2Str");
			String project3Str=(String) session.getAttribute("project3Str");
			String project4Str=(String) session.getAttribute("project4Str");
			
			ProjectMenuVo project2=getProjectMenuVo(project2Str);
			ProjectMenuVo project3=getProjectMenuVo(project3Str);
			ProjectMenuVo project4=getProjectMenuVo(project4Str);
			
			
			List<Attachment> attachments=null;
			String attchmentsFromStr=(String) session.getAttribute("attchmentsFromStr");  //附件列表
			if(StringUtils.isNotBlank(attchmentsFromStr)){
				attachments=JSON.parseArray(attchmentsFromStr, Attachment.class);
			}
			
			if(project1!=null)  projectVo.setProject1(project1);
			if(project2!=null)  projectVo.setProject2(project2);
			if(project3!=null)  projectVo.setProject3(project3);
			if(project4!=null)  projectVo.setProject4(project4);
			if (attachments!=null) projectVo.setAttchments(attachments);
			
			projectService.saveProject(projectVo);
			
			json.setSuccess(true);
			json.setMsg("立项成功");
		}catch(Exception e){
			json.setSuccess(true);
			json.setMsg("立项失败");
		}finally {
			return JSON.toJSONString(json);
		}		
	}
	
	private ProjectMenuVo getProjectMenuVo(String projectMenuVo){
		if(StringUtils.isBlank(projectMenuVo)){
			return null;
		}
		return JSON.parseObject(projectMenuVo, ProjectMenuVo.class);
	}


	@RequestMapping(value ="/exportDetail")
	public void exportDetail(HttpServletRequest request, HttpServletResponse response) {
		String projectCode = request.getParameter("projectCode");
		if(null!=projectCode&&!projectCode.equals("")) {   //判断ID是否为空
			
			List<ProjectMenuVo>  projectProductList = projectProductService.findVoByProjectCode(projectCode);
			
			if(projectProductList!=null&&projectProductList.size()>0) {
				
				HSSFWorkbook workbook = new HSSFWorkbook();
				HSSFSheet sheet = workbook.createSheet("资源清单");			
				/*################################表头部分设置START################################*/
				// 表头字体设置
				HSSFFont headerfont = workbook.createFont();
				// 字体加粗 	
				headerfont.setBoldweight(Font.BOLDWEIGHT_BOLD);  
				
				//表头style设置
				HSSFCellStyle headerStyle = workbook.createCellStyle();
				// 设置长文本自动换行
				headerStyle.setFont(headerfont);
				
				//水平方向对齐
				headerStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
				// 垂直方向的对齐方式
				headerStyle.setVerticalAlignment(HSSFCellStyle.ALIGN_CENTER);
				
				//设置边框
				headerStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
				headerStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
				headerStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
				headerStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
				
				//设置背景颜色
				headerStyle.setFillBackgroundColor(IndexedColors.LIGHT_CORNFLOWER_BLUE.getIndex());
				/*################################表头部分设置END################################*/  
				
				/*################################普通单元格部分设置START################################*/
				// 创建样式
				HSSFFont commonfont = workbook.createFont();
				HSSFCellStyle commonStyle = workbook.createCellStyle();
				commonStyle.setWrapText(true);
				commonStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER); // 水平居中    
				commonStyle.setVerticalAlignment(CellStyle.VERTICAL_CENTER);//垂直居中 
				commonStyle.setFont(commonfont);
				//水平方向对齐
				commonStyle.setAlignment(HSSFCellStyle.ALIGN_CENTER);
				//设置边框
				commonStyle.setBorderLeft(HSSFCellStyle.BORDER_THIN);
				commonStyle.setBorderRight(HSSFCellStyle.BORDER_THIN);
				commonStyle.setBorderTop(HSSFCellStyle.BORDER_THIN);
				commonStyle.setBorderBottom(HSSFCellStyle.BORDER_THIN);
				/*################################普通单元格部分设置END################################*/
				//生成第一行标题行
				//XSSFRow fristHeadRow = sheet.createRow(0);
				
				//生成第一行表头行
				String[] headers = {"场次名称","业务","类型","产品清单","产品规格","购买数量","执行开始时间","执行结束时间","已选小区"};
				HSSFRow headerRow = sheet.createRow(0);
				HSSFRichTextString text;
			    for (int i = 0; i < headers.length; i++) {
			    	HSSFCell cell = headerRow.createCell(i);
			    	cell.setCellStyle(headerStyle);
			    	text = new HSSFRichTextString(headers[i]);
					cell.setCellValue(text);
				}
			    int rowNum = 1;
			    SimpleDateFormat fmt1 = new SimpleDateFormat("yyyy年MM月dd日");
			    SimpleDateFormat fmt2 = new SimpleDateFormat("yyyy年MM月dd日   HH:mm");
			    for(ProjectMenuVo pvo : projectProductList) {
			    	if(pvo.getBusinessType().equals("1")) {
			    		sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum+(pvo.getProjectMenus().size()-1),0,0));
			    		sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum+(pvo.getProjectMenus().size()-1),1,1));
			    		sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum+(pvo.getProjectMenus().size()-1),8,8));
			    		int row1 = 1;
			    		for(ProductMenuVo vo : pvo.getProjectMenus()) {
			    			if(row1==1) {
			    				int s=0;
			    				HSSFRow row = sheet.createRow(rowNum++);
			    				//场次名称
			    				HSSFCell cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getFieldName());
			    				//业务
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getBusinessName());
			    				//类型
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductType());
			    				//产品清单
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductMenu());
			    				//产品规格
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductSpec());
			    				//购买数量
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getBuyNum());
			    				//执行开始时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt2.format(vo.getBeginTime()));
			    				//执行结束时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt2.format(vo.getEndTime()));
			    				//已选小区
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getAreaName());
			    			}else {
			    				int s=2;
			    				HSSFRow row = sheet.createRow(rowNum++);
			    				//场次名称
			    				
			    				//类型
			    				HSSFCell cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductType());
			    				//产品清单
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductMenu());
			    				//产品规格
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductSpec());
			    				//购买数量
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getBuyNum());
			    				//执行开始时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt2.format(vo.getBeginTime()));
			    				//执行结束时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt2.format(vo.getEndTime()));
			    			}
			    		}
			    	}else {
			    		sheet.addMergedRegion(new CellRangeAddress(rowNum,rowNum+(pvo.getProjectMenus().size()-1),1,1));
			    		int row1 = 1;
			    		for(ProductMenuVo vo : pvo.getProjectMenus()) {
			    			if(row1==1) {
			    				int s=0;
			    				HSSFRow row = sheet.createRow(rowNum++);
			    				//场次名称
			    				HSSFCell cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getFieldName());
			    				//业务
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getBusinessName());
			    				//类型
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductType());
			    				//产品清单
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductMenu());
			    				//产品规格
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductSpec());
			    				//购买数量
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getBuyNum());
			    				//执行开始时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt1.format(vo.getBeginTime()));
			    				//执行结束时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt1.format(vo.getEndTime()));
			    				//已选小区
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getAreaNames());
			    			}else {
			    				int s=0;
			    				HSSFRow row = sheet.createRow(rowNum++);
			    				//场次名称
			    				HSSFCell cell = row.createCell(s++);
			    				s++;                   //跳过业务
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(pvo.getFieldName());
			    				
			    				//类型
			    			    cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductType());
			    				//产品清单
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductMenu());
			    				//产品规格
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getProductSpec());
			    				//购买数量
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getBuyNum());
			    				//执行开始时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt1.format(vo.getBeginTime()));
			    				//执行结束时间
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(fmt1.format(vo.getEndTime()));
			    				//已选小区
			    				cell = row.createCell(s++);
			    				cell.setCellStyle(commonStyle);
			    				cell.setCellValue(vo.getAreaNames());
			    			}
			    		}
			    	}
			    }
			    
			    for (int i = 0; i < headers.length; i++) {
			    	sheet.autoSizeColumn(i);
			    	if(sheet.getColumnWidth(i) < 20*256){
			    		sheet.setColumnWidth(i, 20*256);
			    	}
				}
			    ExportExcelUtil.downSpcialFile("资料清单.xls",workbook,request,response);
			}
		}

	}

	
}
